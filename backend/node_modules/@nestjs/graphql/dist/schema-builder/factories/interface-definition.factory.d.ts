import { GraphQLInterfaceType } from 'graphql';
import { BuildSchemaOptions } from '@nestjs/graphql/lib/interfaces';
import { InterfaceMetadata } from '@nestjs/graphql/lib/schema-builder/metadata/interface.metadata';
import { OrphanedReferenceRegistry } from '@nestjs/graphql/lib/schema-builder/services/orphaned-reference.registry';
import { TypeFieldsAccessor } from '@nestjs/graphql/lib/schema-builder/services/type-fields.accessor';
import { TypeDefinitionsStorage } from '@nestjs/graphql/lib/schema-builder/storages/type-definitions.storage';
import { ArgsFactory } from '@nestjs/graphql/lib/schema-builder/factories/args.factory';
import { AstDefinitionNodeFactory } from '@nestjs/graphql/lib/schema-builder/factories/ast-definition-node.factory';
import { OutputTypeFactory } from '@nestjs/graphql/lib/schema-builder/factories/output-type.factory';
import { ResolveTypeFactory } from '@nestjs/graphql/lib/schema-builder/factories/resolve-type.factory';
export interface InterfaceTypeDefinition {
    target: Function;
    type: GraphQLInterfaceType;
    isAbstract: boolean;
    interfaces: Function[];
}
export declare class InterfaceDefinitionFactory {
    private readonly resolveTypeFactory;
    private readonly typeDefinitionsStorage;
    private readonly outputTypeFactory;
    private readonly orphanedReferenceRegistry;
    private readonly typeFieldsAccessor;
    private readonly argsFactory;
    private readonly astDefinitionNodeFactory;
    constructor(resolveTypeFactory: ResolveTypeFactory, typeDefinitionsStorage: TypeDefinitionsStorage, outputTypeFactory: OutputTypeFactory, orphanedReferenceRegistry: OrphanedReferenceRegistry, typeFieldsAccessor: TypeFieldsAccessor, argsFactory: ArgsFactory, astDefinitionNodeFactory: AstDefinitionNodeFactory);
    create(metadata: InterfaceMetadata, options: BuildSchemaOptions): InterfaceTypeDefinition;
    private createResolveTypeFn;
    private generateFields;
    private generateInterfaces;
}
//# sourceMappingURL=interface-definition.factory.d.ts.map